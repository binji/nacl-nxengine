//hash:0b443ff1
//automatically generated by Makegen

/* located in ObjManager.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
Object *CreateObject(int x, int y, int type);


/* located in caret.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
Caret *effect(int x, int y, int effectno);


/* located in player.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
void GetPlayerShootPoint(int *x_out, int *y_out);


/* located in playerstats.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
void AddXP(int xp, bool quiet);


/* located in p_arms.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
void PResetWeapons();
void PDoWeapons(void);
void FireWeapon(void);
void RunWeapon(bool firing);
void SetupBullet(Object *shot, int x, int y, int btype, int dir);
static Object *FireSimpleBullet(int otype, int btype, int xoff, int yoff);
static Object *FireSimpleBulletOffset(int otype, int btype, int xoff, int yoff);
static void PFirePolarStar(int level);
static void PFireMachineGun(int level);
void FireLevel23MGun(int x, int y, int level, int dir);
void PMgunFly(void);
static void PFireMissile(int level, bool is_super);
static void PFireFireball(int level);
static void PFireBlade(int level);
static void PFireSnake(int level);
static void PFireNemesis(int level);
static void PFireBubbler(int level);
static void PFireSpur(void);
static void PHandleSpur(void);
static bool can_fire_spur(void);
static bool IsWeaponMaxed(void);


/* located in statusbar.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
void stat_PrevWeapon(bool quiet);
void stat_NextWeapon(bool quiet);


/* located in input.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
bool justpushed(int k);


/* located in ai/weapons/whimstar.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
void init_whimstar(WhimsicalStar *wh);
void run_whimstar(WhimsicalStar *wh);
void add_whimstar(WhimsicalStar *wh);


/* located in sound/sound.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
void sound(int snd);


/* located in common/misc.cpp */

//--------------------[referenced from p_arms.cpp]-------------------//
int random(int min, int max);

