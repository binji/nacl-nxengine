# vim: set syntax=python

ARCHES=('x86_32', 'x86_64', 'arm')
CONFIGS=('debug', 'release')
arch_config={'arch': ARCHES, 'config': CONFIGS}
debug_keys = {'config': 'debug'}
release_keys = {'config': 'release'}

Variable('nacl_sdk_root', Args['nacl_sdk_root'])
Variable('toolchain_dir', '$nacl_sdk_root/toolchain')
Variable('toolchain_dir_x86', '$toolchain_dir/%s_x86_newlib' % Args['platform'])
Variable('toolchain_dir_arm', '$toolchain_dir/%s_arm_newlib' % Args['platform'])
Variable('ar-arm', '$toolchain_dir_arm/bin/arm-nacl-ar')
Variable('ar-x86_32', '$toolchain_dir_x86/bin/i686-nacl-ar')
Variable('ar-x86_64', '$toolchain_dir_x86/bin/x86_64-nacl-ar')
Variable('cc-arm', '$toolchain_dir_arm/bin/arm-nacl-gcc')
Variable('cc-x86_32', '$toolchain_dir_x86/bin/i686-nacl-gcc')
Variable('cc-x86_64', '$toolchain_dir_x86/bin/x86_64-nacl-gcc')
Variable('cxx-arm', '$toolchain_dir_arm/bin/arm-nacl-g++')
Variable('cxx-x86_32', '$toolchain_dir_x86/bin/i686-nacl-g++')
Variable('cxx-x86_64', '$toolchain_dir_x86/bin/x86_64-nacl-g++')
Variable('strip-arm', '$toolchain_dir_arm/bin/arm-nacl-strip')
Variable('strip-x86_32', '$toolchain_dir_x86/bin/i686-nacl-strip')
Variable('strip-x86_64', '$toolchain_dir_x86/bin/x86_64-nacl-strip')
Variable('nmf', '$nacl_sdk_root/tools/create_nmf.py')

Rule('cp', 'cp $in $out', 'COPY $out')
Rule('cc', '$cc $ccflags -MMD -MF $out.d -c $in -o $out', 'CC $out',
     depfile='$out.d')
Rule('ar', '$ar rc $out $in', 'AR $out')
Rule('link', '$cc $in $ldflags -o $out', 'LINK $out')
Rule('nmf', '$nmf $in -o $out', 'NMF $out')
Rule('zip', 'rm -f $out && zip -9 $out -j $in', 'ZIP $out')
Rule('strip', '$strip $in -o $out', 'STRIP $out')

sources = Build('out/{arch}/{config}/{inf:-ext}.o', 'cc', '{inf}') \
    .Tag('{name}-sources')
#lib = Build('out/{arch}/{config}/lib{name}.a', 'ar').Tag('{name}-lib')
exe = Build('out/{name}_{arch}_{config}.nexe', 'link').Tag('{name}-exe')
nmf = Build('out/{name}_{config}.nmf', 'nmf').Tag('{name}-nmf')
data = Build('out/{inf}', 'cp', 'data/{inf}').Tag('{name}-data')

SOURCES = [
  'src/ai/ai.cpp',
  'src/ai/almond/almond.cpp',
  'src/ai/balrog_common.cpp',
  'src/ai/boss/balfrog.cpp',
  'src/ai/boss/ballos.cpp',
  'src/ai/boss/core.cpp',
  'src/ai/boss/heavypress.cpp',
  'src/ai/boss/ironhead.cpp',
  'src/ai/boss/omega.cpp',
  'src/ai/boss/sisters.cpp',
  'src/ai/boss/undead_core.cpp',
  'src/ai/boss/x.cpp',
  'src/ai/egg/egg2.cpp',
  'src/ai/egg/egg.cpp',
  'src/ai/egg/igor.cpp',
  'src/ai/final_battle/balcony.cpp',
  'src/ai/final_battle/doctor_common.cpp',
  'src/ai/final_battle/doctor.cpp',
  'src/ai/final_battle/doctor_frenzied.cpp',
  'src/ai/final_battle/final_misc.cpp',
  'src/ai/final_battle/misery.cpp',
  'src/ai/final_battle/sidekicks.cpp',
  'src/ai/first_cave/first_cave.cpp',
  'src/ai/hell/ballos_misc.cpp',
  'src/ai/hell/ballos_priest.cpp',
  'src/ai/hell/hell.cpp',
  'src/ai/IrregularBBox.cpp',
  'src/ai/last_cave/last_cave.cpp',
  'src/ai/maze/balrog_boss_missiles.cpp',
  'src/ai/maze/critter_purple.cpp',
  'src/ai/maze/gaudi.cpp',
  'src/ai/maze/labyrinth_m.cpp',
  'src/ai/maze/maze.cpp',
  'src/ai/maze/pooh_black.cpp',
  'src/ai/npc/balrog.cpp',
  'src/ai/npc/curly_ai.cpp',
  'src/ai/npc/curly.cpp',
  'src/ai/npc/misery.cpp',
  'src/ai/npc/npcguest.cpp',
  'src/ai/npc/npcplayer.cpp',
  'src/ai/npc/npcregu.cpp',
  'src/ai/oside/oside.cpp',
  'src/ai/plantation/plantation.cpp',
  'src/ai/sand/curly_boss.cpp',
  'src/ai/sand/puppy.cpp',
  'src/ai/sand/sand.cpp',
  'src/ai/sand/toroko_frenzied.cpp',
  'src/ai/sym/smoke.cpp',
  'src/ai/sym/sym.cpp',
  'src/ai/village/balrog_boss_running.cpp',
  'src/ai/village/ma_pignon.cpp',
  'src/ai/village/village.cpp',
  'src/ai/weapons/blade.cpp',
  'src/ai/weapons/bubbler.cpp',
  'src/ai/weapons/fireball.cpp',
  'src/ai/weapons/missile.cpp',
  'src/ai/weapons/nemesis.cpp',
  'src/ai/weapons/polar_mgun.cpp',
  'src/ai/weapons/snake.cpp',
  'src/ai/weapons/spur.cpp',
  'src/ai/weapons/weapons.cpp',
  'src/ai/weapons/whimstar.cpp',
  'src/ai/weed/balrog_boss_flying.cpp',
  'src/ai/weed/frenzied_mimiga.cpp',
  'src/ai/weed/weed.cpp',
  'src/autogen/AssignSprites.cpp',
  'src/autogen/objnames.cpp',
  'src/caret.cpp',
  'src/common/BList.cpp',
  'src/common/bufio.cpp',
  'src/common/DBuffer.cpp',
  'src/common/DString.cpp',
  'src/common/FileBuffer.cpp',
  'src/common/InitList.cpp',
  'src/common/misc.cpp',
  'src/common/stat.cpp',
  'src/common/StringList.cpp',
  'src/console.cpp',
  'src/debug.cpp',
  'src/endgame/credits.cpp',
  'src/endgame/CredReader.cpp',
  'src/endgame/island.cpp',
  'src/endgame/misc.cpp',
  'src/extract/crc.cpp',
  'src/extract/extract.cpp',
  'src/extract/extractfiles.cpp',
  'src/extract/extractpxt.cpp',
  'src/extract/extractstages.cpp',
  'src/floattext.cpp',
  'src/game.cpp',
  'src/graphics/font.cpp',
  'src/graphics/graphics.cpp',
  'src/graphics/nxsurface.cpp',
  'src/graphics/palette.cpp',
  'src/graphics/safemode.cpp',
  'src/graphics/sprites.cpp',
  'src/graphics/tileset.cpp',
  'src/input.cpp',
  'src/intro/intro.cpp',
  'src/intro/title.cpp',
  'src/inventory.cpp',
  'src/main.cpp',
  'src/map.cpp',
  'src/map_system.cpp',
  'src/niku.cpp',
  'src/object.cpp',
  'src/ObjManager.cpp',
  'src/p_arms.cpp',
  'src/pause/dialog.cpp',
  'src/pause/message.cpp',
  'src/pause/objects.cpp',
  'src/pause/options.cpp',
  'src/pause/pause.cpp',
  'src/platform.cpp',
  'src/player.cpp',
  'src/playerstats.cpp',
  'src/profile.cpp',
  'src/replay.cpp',
  'src/screeneffect.cpp',
  'src/settings.cpp',
  'src/siflib/sectSprites.cpp',
  'src/siflib/sectStringArray.cpp',
  'src/siflib/sif.cpp',
  'src/siflib/sifloader.cpp',
  'src/siflib/sifupgrade.cpp',
  'src/slope.cpp',
  'src/sound/org.cpp',
  'src/sound/pxt.cpp',
  'src/sound/sound.cpp',
  'src/sound/sslib.cpp',
  'src/stageboss.cpp',
  'src/stagedata.cpp',
  'src/statusbar.cpp',
  'src/TextBox/ItemImage.cpp',
  'src/TextBox/SaveSelect.cpp',
  'src/TextBox/StageSelect.cpp',
  'src/TextBox/TextBox.cpp',
  'src/TextBox/YesNoPrompt.cpp',
  'src/trig.cpp',
  'src/tsc.cpp',
]

INCLUDE_DIRS = [
  '$nacl_sdk_root/include',
  'third_party/include',
  'third_party/include/SDL',
]

DEFINES = [
]

LIB_DIRS = [
  '$nacl_sdk_root/lib/newlib_{arch}/Debug',
  'third_party/lib/newlib_{arch}',
]

LIBS = [
  'ppapi_simple',
  'nacl_io',
  'SDL_ttf',
  'freetype',
  'SDL',
  'z',
  'ppapi_cpp',
  'ppapi',
  'nosys',
]

WARNINGS = [
  'all',
  'error',
  'no-comment',
  'no-delete-non-virtual-dtor',
  'no-missing-braces',
  'no-multichar',
  'no-narrowing',
  'no-sign-compare',
  'no-switch',
  'no-uninitialized',
  'no-unused',
  'no-unused-variable',
]

for b in sources.ForEach(name='nx', inf=SOURCES, **arch_config):
  b.Set('ccflags', Prefix('-I', INCLUDE_DIRS))
  b.Append('ccflags', Prefix('-D', DEFINES))
  b.Append('ccflags', Prefix('-W', WARNINGS))

for b in exe.ForEach(name='nx', **arch_config):
  subkeys = b.SubKeys('arch', 'config')
  b.Set('ldflags', Prefix('-L', LIB_DIRS))
  b.Set('ldflags', Prefix('-l', LIBS))
  b.Set('inputs', Select('nx-sources').And(keys=subkeys).outputs)

for b in nmf.ForEach(name='nx', config=CONFIGS):
  b.Append('inputs', Select('nx-exe').And(keys=b.SubKeys('config')).outputs)


#
# Data files
#
DATA_FILES = [
  'background.js',
  'font.ttf',
  'index.html',
  'sprites.sif',
  'tilekey.dat'
]

for b in data.ForEach(name='nx', inf=DATA_FILES):
  pass


#
# Manifest files
#
Rule('manifest',
     'script/generate_manifest.py -o $out -c $config -t $in $resources $key',
     'MANIFEST $out',
     implicit='script/generate_manifest.py')

def GenerateManifest(out, config, with_key=True):
  config_keys = {'config': config}
  resources = Select('nx-exe').And(keys=config_keys).outputs
  resources += Select('nx-nmf').And(keys=config_keys).outputs
  resources = [Filename(n).Base for n in resources]
  key = '-k' if with_key else ''

  return Build(out, 'manifest', 'data/manifest.json.template',
               config=config, resources=resources, key=key)

GenerateManifest('out/manifest.json', 'debug')
GenerateManifest('out/package/manifest.json', 'release')
GenerateManifest('out/package-release/manifest.json', 'release',
                 with_key=False).Tag('package')


# Copy data files to packagedir
for b in Select('nx-data'):
  n = Build('out/package/' + Filename(b.outputs).base, 'cp', b.outputs)
  n.Tag('package')

# Copy .nexes to packagedir, stripped.
for b in Select('nx-exe').And(keys=release_keys):
  n = Build('out/package/' + Filename(b.outputs).Base, 'strip', b.outputs)
  n.Set('strip', '$strip-' + b.keys['arch'])
  n.Tag('package')

# Copy .nmfs to packagedir
for b in Select('nx-nmf').And(keys=release_keys):
  n = Build('out/package/' + Filename(b.outputs).Base, 'cp', b.outputs)
  n.Tag('package')

# Zip files in package
Build('out/package.zip', 'zip', Select('package').outputs)


################################################################################

for b in Select(keys=debug_keys).And(rule='cc'):
  b.Append('ccflags', '-g -O0')
for b in Select(keys=release_keys).And(rule='cc'):
  b.Append('ccflags', '-g -O3')
for b in Select(rule='cc'):
  ext = Filename(b.inputs).Extension
  if ext in ('.cc', '.cpp'):
    b.Set('cc', '$cxx-{arch}')
  elif ext == '.c':
    b.Set('cc', '$cc-{arch}')
for b in Select(rule='link'):
  b.Set('cc', '$cxx-{arch}')
for b in Select(rule='ar'):
  b.Set('ar', '$ar-{arch}')
